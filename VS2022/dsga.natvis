<?xml version="1.0" encoding="utf-8"?> 
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

	<Type Name="std::array&lt;*,*&gt;" IncludeView="dsga">
		<DisplayString Condition="$T2 == 1">{{ {_Elems[0],g} }}</DisplayString>
		<DisplayString Condition="$T2 == 2">{{ {_Elems[0],g}, {_Elems[1],g} }}</DisplayString>
		<DisplayString Condition="$T2 == 3">{{ {_Elems[0],g}, {_Elems[1],g}, {_Elems[2],g} }}</DisplayString>
		<DisplayString Condition="$T2 == 4">{{ {_Elems[0],g}, {_Elems[1],g}, {_Elems[2],g}, {_Elems[3],g} }}</DisplayString>
		<DisplayString>{{ ??? }}</DisplayString>
		<Expand HideRawView="true">
			<Synthetic Name="values"><DisplayString>{{ size = {$T2} }}</DisplayString></Synthetic>
			<ArrayItems>
				<Size>$T2</Size>
				<ValuePointer>_Elems</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="dsga::storage_wrapper&lt;*,*&gt;">
		<DisplayString>{store,view(dsga)}</DisplayString>
		<Expand>
			<Synthetic Name="values"><DisplayString>{{ size = {$T2} }}</DisplayString></Synthetic>
			<ExpandedItem>store</ExpandedItem>
		</Expand>
	</Type>

	<Type Name="dsga::vector_base&lt;*,*,*,*&gt;">
		<DisplayString>{*($T4 *)this}</DisplayString>
		<Expand HideRawView="true">
			<ExpandedItem>*($T4 *)this</ExpandedItem>
			<Item Name="[Raw Derived]">*($T4 *)this,!</Item>
		</Expand>
	</Type>

	<Type Name="dsga::basic_vector&lt;*,*&gt;">
		<DisplayString>{base}</DisplayString>
		<Expand>
			<ExpandedItem>base</ExpandedItem>
		</Expand>
	</Type>

	<Type Name="dsga::indexed_vector&lt;*,*,*,*&gt;" IncludeView="indexed">
		<DisplayString>{{ {base[$T4],g} }}</DisplayString>
		<Expand HideRawView="true">
			<Item Name="base">base,view(dsga)</Item>
			<Synthetic Name="offsets">
				<DisplayString>[ {$T4} ]</DisplayString>
				<Expand>
					<Synthetic Name="values"><DisplayString>{{ size = {$T3} }}</DisplayString></Synthetic>
					<Item Name="[0]">$T4</Item>
				</Expand>
			</Synthetic>
			<Item Name="writable">Writable</Item>
		</Expand>
	</Type>
	
	<Type Name="dsga::indexed_vector&lt;*,*,*,*&gt;" ExcludeView="indexed">
		<DisplayString>{*this,view(indexed)}</DisplayString>
		<Expand>
			<Synthetic Name="values"><DisplayString>{{ size = {$T3} }}</DisplayString></Synthetic>
			<Item Name="[0]">base[$T4]</Item>
			<Item Name="[Index View]">*this,view(indexed)</Item>
		</Expand>
	</Type>
	
	<Type Name="dsga::indexed_vector&lt;*,*,*,*,*&gt;" IncludeView="indexed">
		<DisplayString>{{ {base[$T4],g}, {base[$T5],g} }}</DisplayString>
		<Expand HideRawView="true">
			<Item Name="base">base,view(dsga)</Item>
			<Synthetic Name="offsets">
				<DisplayString>[ {$T4}, {$T5} ]</DisplayString>
				<Expand>
					<Synthetic Name="values"><DisplayString>{{ size = {$T3} }}</DisplayString></Synthetic>
					<Item Name="[0]">$T4</Item>
					<Item Name="[1]">$T5</Item>
				</Expand>
			</Synthetic>
			<Item Name="writable">Writable</Item>
		</Expand>
	</Type>
	
	<Type Name="dsga::indexed_vector&lt;*,*,*,*,*&gt;" ExcludeView="indexed">
		<DisplayString>{*this,view(indexed)}</DisplayString>
		<Expand>
			<Synthetic Name="values"><DisplayString>{{ size = {$T3} }}</DisplayString></Synthetic>
			<Item Name="[0]">base[$T4]</Item>
			<Item Name="[1]">base[$T5]</Item>
			<Item Name="[Index View]">*this,view(indexed)</Item>
		</Expand>
	</Type>
	
	<Type Name="dsga::indexed_vector&lt;*,*,*,*,*,*&gt;" IncludeView="indexed">
		<DisplayString>{{ {base[$T4],g}, {base[$T5],g}, {base[$T6],g} }}</DisplayString>
		<Expand HideRawView="true">
			<Item Name="base">base,view(dsga)</Item>
			<Synthetic Name="offsets">
				<DisplayString>[ {$T4}, {$T5}, {$T6} ]</DisplayString>
				<Expand>
					<Synthetic Name="values"><DisplayString>{{ size = {$T3} }}</DisplayString></Synthetic>
					<Item Name="[0]">$T4</Item>
					<Item Name="[1]">$T5</Item>
					<Item Name="[2]">$T6</Item>
				</Expand>
			</Synthetic>
			<Item Name="writable">Writable</Item>
		</Expand>
	</Type>
	
	<Type Name="dsga::indexed_vector&lt;*,*,*,*,*,*&gt;" ExcludeView="indexed">
		<DisplayString>{*this,view(indexed)}</DisplayString>
		<Expand>
			<Synthetic Name="values"><DisplayString>{{ size = {$T3} }}</DisplayString></Synthetic>
			<Item Name="[0]">base[$T4]</Item>
			<Item Name="[1]">base[$T5]</Item>
			<Item Name="[2]">base[$T6]</Item>
			<Item Name="[Index View]">*this,view(indexed)</Item>
		</Expand>
	</Type>
	
	<Type Name="dsga::indexed_vector&lt;*,*,*,*,*,*,*&gt;" IncludeView="indexed">
		<DisplayString>{{ {base[$T4],g}, {base[$T5],g}, {base[$T6],g}, {base[$T7],g} }}</DisplayString>
		<Expand HideRawView="true">
			<Item Name="base">base,view(dsga)</Item>
			<Synthetic Name="offsets">
				<DisplayString>[ {$T4}, {$T5}, {$T6}, {$T7} ]</DisplayString>
				<Expand>
					<Synthetic Name="values"><DisplayString>{{ size = {$T3} }}</DisplayString></Synthetic>
					<Item Name="[0]">$T4</Item>
					<Item Name="[1]">$T5</Item>
					<Item Name="[2]">$T6</Item>
					<Item Name="[3]">$T7</Item>
				</Expand>
			</Synthetic>
			<Item Name="writable">Writable</Item>
		</Expand>
	</Type>

	<Type Name="dsga::indexed_vector&lt;*,*,*,*,*,*,*&gt;" ExcludeView="indexed">
		<DisplayString>{*this,view(indexed)}</DisplayString>
		<Expand>
			<Synthetic Name="values"><DisplayString>{{ size = {$T3} }}</DisplayString></Synthetic>
			<Item Name="[0]">base[$T4]</Item>
			<Item Name="[1]">base[$T5]</Item>
			<Item Name="[2]">base[$T6]</Item>
			<Item Name="[3]">base[$T7]</Item>
			<Item Name="[Index View]">*this,view(indexed)</Item>
		</Expand>
	</Type>

	<Type Name="dsga::indexed_vector_iterator&lt;*,*,*,*&gt;">
		<AlternativeType Name="dsga::indexed_vector_const_iterator&lt;*,*,*,*&gt;" />
		<DisplayString Condition="mapper_index == 0">{{ value = {(*mapper_ptr).base[$T4]} }}</DisplayString>
		<DisplayString Condition="mapper_index == 1">{{ end }}</DisplayString>
		<DisplayString>{{ ??? }}</DisplayString>
		<Expand HideRawView="true">
			<Item Name="offset" Condition="mapper_index != 1">mapper_index</Item>
			<Item Name="base">*mapper_ptr</Item>
			<Item Name="[Raw Index]">mapper_index</Item>
		</Expand>
	</Type>

	<Type Name="dsga::indexed_vector_iterator&lt;*,*,*,*,*&gt;">
		<AlternativeType Name="dsga::indexed_vector_const_iterator&lt;*,*,*,*,*&gt;" />
		<DisplayString Condition="mapper_index == 0">{{ value = {(*mapper_ptr).base[$T4]} }}</DisplayString>
		<DisplayString Condition="mapper_index == 1">{{ value = {(*mapper_ptr).base[$T5]} }}</DisplayString>
		<DisplayString Condition="mapper_index == 2">{{ end }}</DisplayString>
		<DisplayString>{{ ??? }}</DisplayString>
		<Expand HideRawView="true">
			<Item Name="offset" Condition="mapper_index != 2">mapper_index</Item>
			<Item Name="base">*mapper_ptr</Item>
			<Item Name="[Raw Index]">mapper_index</Item>
		</Expand>
	</Type>

	<Type Name="dsga::indexed_vector_iterator&lt;*,*,*,*,*,*&gt;">
		<AlternativeType Name="dsga::indexed_vector_const_iterator&lt;*,*,*,*,*,*&gt;" />
		<DisplayString Condition="mapper_index == 0">{{ value = {(*mapper_ptr).base[$T4]} }}</DisplayString>
		<DisplayString Condition="mapper_index == 1">{{ value = {(*mapper_ptr).base[$T5]} }}</DisplayString>
		<DisplayString Condition="mapper_index == 2">{{ value = {(*mapper_ptr).base[$T6]} }}</DisplayString>
		<DisplayString Condition="mapper_index == 3">{{ end }}</DisplayString>
		<DisplayString>{{ ??? }}</DisplayString>
		<Expand HideRawView="true">
			<Item Name="offset" Condition="mapper_index != 3">mapper_index</Item>
			<Item Name="base">*mapper_ptr</Item>
			<Item Name="[Raw Index]">mapper_index</Item>
		</Expand>
	</Type>

	<Type Name="dsga::indexed_vector_iterator&lt;*,*,*,*,*,*,*&gt;">
		<AlternativeType Name="dsga::indexed_vector_const_iterator&lt;*,*,*,*,*,*,*&gt;" />
		<DisplayString Condition="mapper_index == 0">{{ value = {(*mapper_ptr).base[$T4]} }}</DisplayString>
		<DisplayString Condition="mapper_index == 1">{{ value = {(*mapper_ptr).base[$T5]} }}</DisplayString>
		<DisplayString Condition="mapper_index == 2">{{ value = {(*mapper_ptr).base[$T6]} }}</DisplayString>
		<DisplayString Condition="mapper_index == 3">{{ value = {(*mapper_ptr).base[$T7]} }}</DisplayString>
		<DisplayString Condition="mapper_index == 4">{{ end }}</DisplayString>
		<DisplayString>{{ ??? }}</DisplayString>
		<Expand HideRawView="true">
			<Item Name="offset" Condition="mapper_index != 4">mapper_index</Item>
			<Item Name="base">*mapper_ptr</Item>
			<Item Name="[Raw Index]">mapper_index</Item>
		</Expand>
	</Type>

	<Type Name="std::reverse_iterator&lt;dsga::indexed_vector_iterator&lt;*,*,*,*&gt; &gt;">
		<AlternativeType Name="std::reverse_iterator&lt;dsga::indexed_vector_const_iterator&lt;*,*,*,*&gt; &gt;" />
		<DisplayString Condition="current.mapper_index == 0">{{ rend }}</DisplayString>
		<DisplayString Condition="current.mapper_index == 1">{{ value = {(*current.mapper_ptr).base[$T4]} }}</DisplayString>
		<DisplayString>{{ ??? }}</DisplayString>
		<Expand HideRawView="true">
			<Item Name="offset" Condition="current.mapper_index != 0">current.mapper_index - 1</Item>
			<Item Name="base">*current.mapper_ptr</Item>
			<Item Name="[Raw Index]">current.mapper_index</Item>
		</Expand>
	</Type>

	<Type Name="std::reverse_iterator&lt;dsga::indexed_vector_iterator&lt;*,*,*,*,*&gt; &gt;">
		<AlternativeType Name="std::reverse_iterator&lt;dsga::indexed_vector_const_iterator&lt;*,*,*,*,*&gt; &gt;" />
		<DisplayString Condition="current.mapper_index == 0">{{ rend }}</DisplayString>
		<DisplayString Condition="current.mapper_index == 1">{{ value = {(*current.mapper_ptr).base[$T4]} }}</DisplayString>
		<DisplayString Condition="current.mapper_index == 2">{{ value = {(*current.mapper_ptr).base[$T5]} }}</DisplayString>
		<DisplayString>{{ ??? }}</DisplayString>
		<Expand HideRawView="true">
			<Item Name="offset" Condition="current.mapper_index != 0">current.mapper_index - 1</Item>
			<Item Name="base">*current.mapper_ptr</Item>
			<Item Name="[Raw Index]">current.mapper_index</Item>
		</Expand>
	</Type>

	<Type Name="std::reverse_iterator&lt;dsga::indexed_vector_iterator&lt;*,*,*,*,*,*&gt; &gt;">
		<AlternativeType Name="std::reverse_iterator&lt;dsga::indexed_vector_const_iterator&lt;*,*,*,*,*,*&gt; &gt;" />
		<DisplayString Condition="current.mapper_index == 0">{{ rend }}</DisplayString>
		<DisplayString Condition="current.mapper_index == 1">{{ value = {(*current.mapper_ptr).base[$T4]} }}</DisplayString>
		<DisplayString Condition="current.mapper_index == 2">{{ value = {(*current.mapper_ptr).base[$T5]} }}</DisplayString>
		<DisplayString Condition="current.mapper_index == 3">{{ value = {(*current.mapper_ptr).base[$T6]} }}</DisplayString>
		<DisplayString>{{ ??? }}</DisplayString>
		<Expand HideRawView="true">
			<Item Name="offset" Condition="current.mapper_index != 0">current.mapper_index - 1</Item>
			<Item Name="base">*current.mapper_ptr</Item>
			<Item Name="[Raw Index]">current.mapper_index</Item>
		</Expand>
	</Type>

	<Type Name="std::reverse_iterator&lt;dsga::indexed_vector_iterator&lt;*,*,*,*,*,*,*&gt; &gt;">
		<AlternativeType Name="std::reverse_iterator&lt;dsga::indexed_vector_const_iterator&lt;*,*,*,*,*,*,*&gt; &gt;" />
		<DisplayString Condition="current.mapper_index == 0">{{ rend }}</DisplayString>
		<DisplayString Condition="current.mapper_index == 1">{{ value = {(*current.mapper_ptr).base[$T4]} }}</DisplayString>
		<DisplayString Condition="current.mapper_index == 2">{{ value = {(*current.mapper_ptr).base[$T5]} }}</DisplayString>
		<DisplayString Condition="current.mapper_index == 3">{{ value = {(*current.mapper_ptr).base[$T6]} }}</DisplayString>
		<DisplayString Condition="current.mapper_index == 4">{{ value = {(*current.mapper_ptr).base[$T7]} }}</DisplayString>
		<DisplayString>{{ ??? }}</DisplayString>
		<Expand HideRawView="true">
			<Item Name="offset" Condition="current.mapper_index != 0">current.mapper_index - 1</Item>
			<Item Name="base">*current.mapper_ptr</Item>
			<Item Name="[Raw Index]">current.mapper_index</Item>
		</Expand>
	</Type>

	<Type Name="dsga::basic_matrix&lt;*,*,*&gt;">
		<DisplayString>{{ cols={$T2}, rows={$T3} }}</DisplayString>
		<Expand>
			<ExpandedItem>columns</ExpandedItem>
		</Expand>
	</Type>

</AutoVisualizer>
